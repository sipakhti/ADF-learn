{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "meeshFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_logdata_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "- filter NULL resourceGroup",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference"
							},
							"name": "logdataParquetStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsAzureSynapseMeeshPoolPARQUETlogs",
								"type": "DatasetReference"
							},
							"name": "logdataPPrquet"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CorrelationID as string,",
						"          OperationName as string,",
						"          Status as string,",
						"          EventCategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          EventInitiatedBy as string,",
						"          ResourceType as string,",
						"          ResourceGroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataParquetStream",
						"logdataParquetStream filter(isNull(ResourceGroup)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid = CorrelationID,",
						"          Operationname = OperationName,",
						"          Status,",
						"          Eventcategory = EventCategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby = EventInitiatedBy,",
						"          Resourcetype = ResourceType,",
						"          Resourcegroup = ResourceGroup,",
						"          Resource",
						"     )) ~> logdataPPrquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_parquet_to_json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference"
							},
							"name": "blobparquetstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericStorageJsonLogs",
								"type": "DatasetReference"
							},
							"name": "jsonSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CorrelationID as string,",
						"          OperationName as string,",
						"          Status as string,",
						"          EventCategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          EventInitiatedBy as string,",
						"          ResourceType as string,",
						"          ResourceGroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> blobparquetstream",
						"blobparquetstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     partitionFileNames:['log_json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CorrelationID,",
						"          OperationName,",
						"          Status,",
						"          EventCategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          EventInitiatedBy,",
						"          ResourceType,",
						"          ResourceGroup,",
						"          Resource",
						"     ),",
						"     partitionBy('hash', 1)) ~> jsonSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlow_DimensionTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_DimensionTables_From_CSV",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductCategoryStream": {},
									"ProductModelStream": {},
									"GETMAXCustomerSK": {},
									"DimProductLatest": {},
									"DimCustomerLatest": {},
									"DimCustomer": {},
									"DimProductSinkStream": {},
									"CustomerSKSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlow_FactSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dtfFactSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_FactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetailStream": {},
									"SalesOrderHeaderStream": {},
									"SectionFiveFactSalesTableSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive database to another db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get database table names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TABLE_NAME as tableName, TABLE_SCHEMA as tableSchema from INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGenericParamedSqlAuth",
								"type": "DatasetReference",
								"parameters": {
									"ds_domain_name": {
										"value": "@pipeline().parameters.pl_source_domain_name",
										"type": "Expression"
									},
									"ds_database": {
										"value": "@pipeline().parameters.pl_source_database",
										"type": "Expression"
									},
									"ds_username": {
										"value": "@pipeline().parameters.pl_source_username",
										"type": "Expression"
									},
									"ds_password": {
										"value": "@pipeline().parameters.pl_source_password",
										"type": "Expression"
									},
									"ds_schema": null,
									"ds_table": "none"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table iterator",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get database table names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get database table names').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Table Copy",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy Table to Table Generic",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pl_source_database": {
												"value": "@pipeline().parameters.pl_source_database",
												"type": "Expression"
											},
											"pl_source_table": {
												"value": "@item().tableName",
												"type": "Expression"
											},
											"pl_source_schema": {
												"value": "@item().tableSchema",
												"type": "Expression"
											},
											"pl_sink_table": {
												"value": "@item().tableName",
												"type": "Expression"
											},
											"pl_sink_schema": {
												"value": "@{pipeline().parameters.pl_source_database}.@{item().tableSchema}",
												"type": "Expression"
											},
											"pl_log_table": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"pl_sink_database": {
												"value": "@pipeline().parameters.pl_sink_database",
												"type": "Expression"
											},
											"pl_sink_domain_name": {
												"value": "@pipeline().parameters.pl_sink_domain_name",
												"type": "Expression"
											},
											"pl_source_domain_name": {
												"value": "@pipeline().parameters.pl_source_domain_name",
												"type": "Expression"
											},
											"pl_source_username": {
												"value": "@pipeline().parameters.pl_source_username",
												"type": "Expression"
											},
											"pl_source_password": {
												"value": "@pipeline().parameters.pl_source_password",
												"type": "Expression"
											},
											"pl_sink_username": {
												"value": "@pipeline().parameters.pl_sink_username",
												"type": "Expression"
											},
											"pl_sink_password": {
												"value": "@pipeline().parameters.pl_sink_password",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_source_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_source_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_source_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					},
					"pl_sink_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_sink_database": {
						"type": "string",
						"defaultValue": "backup"
					},
					"pl_sink_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_sink_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					}
				},
				"variables": {
					"rowsProcessed": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-ParquetLogs-to-JsonLogs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df-JSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_parquet_to_json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"blobparquetstream": {},
									"jsonSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy JSON logs to Pool DB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df-JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CorrelationID']"
										},
										"sink": {
											"name": "CorrelationID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['OperationName']"
										},
										"sink": {
											"name": "OperationName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['EventCategory']"
										},
										"sink": {
											"name": "EventCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['EventInitiatedBy']"
										},
										"sink": {
											"name": "EventInitiatedBy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ResourceType']"
										},
										"sink": {
											"name": "ResourceType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ResourceGroup']"
										},
										"sink": {
											"name": "ResourceGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "GenericStorageJsonLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsLogJsontable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_parquet_to_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-blob-data-to Poll-DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_logdata_parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataParquetStream": {},
									"logdataPPrquet": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_logdata_parquet')]"
			]
		}
	]
}