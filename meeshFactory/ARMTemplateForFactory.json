{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "meeshFactory"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlMeesh_demoData_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlMeesh_demoData_connection'"
		},
		"GenericStorage_connection_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'GenericStorage_connection'"
		},
		"LS_dp203workspace1234_meeshpool_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_dp203workspace1234_meeshpool'"
		},
		"lsAzureSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lsAzureSQL'"
		},
		"lsAzureSqlParamed_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lsAzureSqlParamed'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().ls_domain_name};Initial Catalog=@{linkedService().ls_database};User ID=@{linkedService().ls_username};Password=@{linkedService().ls_password}"
		},
		"GenericStorage_connection_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203geneicstorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy Table to Table Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "\n1) Fetching limited rows\n\n2) Copy the rows in an another , By changing the one filed \n\n3) Table , Log how many rows you processed , pipeline name , pipeline run id , run date \n\nsource table , target table\n",
				"activities": [
					{
						"name": "get_table_total_rows",
						"description": "returns the total number of the table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log Activity Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGetTotalRowCount]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.pl_source_table",
											"type": "Expression"
										}
									},
									"tableSchema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.pl_source_schema",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGenericParamedSqlAuth",
								"type": "DatasetReference",
								"parameters": {
									"ds_domain_name": {
										"value": "@pipeline().parameters.pl_source_domain_name",
										"type": "Expression"
									},
									"ds_database": {
										"value": "@pipeline().parameters.pl_source_database",
										"type": "Expression"
									},
									"ds_username": {
										"value": "@pipeline().parameters.pl_source_username",
										"type": "Expression"
									},
									"ds_password": {
										"value": "@pipeline().parameters.pl_source_password",
										"type": "Expression"
									},
									"ds_schema": {
										"value": "@pipeline().parameters.pl_source_schema",
										"type": "Expression"
									},
									"ds_table": {
										"value": "@pipeline().parameters.pl_source_table",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "batch iterator over the rows",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_table_total_rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,add(div(activity('get_table_total_rows').output.firstRow.totalRows, int(pipeline().parameters.pl_batch_size)),1))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Row Copier",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[spGetRows]",
											"storedProcedureParameters": {
												"batchSize": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.pl_batch_size",
														"type": "Expression"
													}
												},
												"offset": {
													"type": "String",
													"value": {
														"value": "@string(mul(item(), int(pipeline().parameters.pl_batch_size)))",
														"type": "Expression"
													}
												},
												"tableName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.pl_source_table",
														"type": "Expression"
													}
												},
												"tableSchema": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.pl_source_schema",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE [@{pipeline().parameters.pl_sink_schema}].[@{pipeline().parameters.pl_sink_table}]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlGenericParamedSqlAuth",
											"type": "DatasetReference",
											"parameters": {
												"ds_domain_name": {
													"value": "@pipeline().parameters.pl_source_domain_name",
													"type": "Expression"
												},
												"ds_database": {
													"value": "@pipeline().parameters.pl_source_database",
													"type": "Expression"
												},
												"ds_username": {
													"value": "@pipeline().parameters.pl_source_username",
													"type": "Expression"
												},
												"ds_password": {
													"value": "@pipeline().parameters.pl_source_password",
													"type": "Expression"
												},
												"ds_schema": {
													"value": "@pipeline().parameters.pl_source_schema",
													"type": "Expression"
												},
												"ds_table": {
													"value": "@pipeline().parameters.pl_source_table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlGenericParamedSqlAuth",
											"type": "DatasetReference",
											"parameters": {
												"ds_domain_name": {
													"value": "@pipeline().parameters.pl_sink_domain_name",
													"type": "Expression"
												},
												"ds_database": {
													"value": "@pipeline().parameters.pl_sink_database",
													"type": "Expression"
												},
												"ds_username": {
													"value": "@pipeline().parameters.pl_sink_username",
													"type": "Expression"
												},
												"ds_password": {
													"value": "@pipeline().parameters.pl_sink_password",
													"type": "Expression"
												},
												"ds_schema": {
													"value": "@pipeline().parameters.pl_sink_schema",
													"type": "Expression"
												},
												"ds_table": {
													"value": "@pipeline().parameters.pl_sink_table",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "If its the last batch",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Row Copier",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(div(activity('get_table_total_rows').output.firstRow.totalRows, int(pipeline().parameters.pl_batch_size)), item())\n\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SetCopiedRows",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "rowsProcessed",
													"value": {
														"value": "@string(add(activity('Row Copier').output.rowsCopied, mul(int(pipeline().parameters.pl_batch_size), item())))",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Log Activity Failure Row Copier",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Row Copier",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logActivityFailure]",
										"storedProcedureParameters": {
											"failureMessage": {
												"value": {
													"value": "@activity('Row Copier').error?.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lsAzureSqlParamed",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_domain_name": {
												"value": "@pipeline().parameters.pl_source_domain_name",
												"type": "Expression"
											},
											"ls_database": {
												"value": "@pipeline().parameters.pl_source_database",
												"type": "Expression"
											},
											"ls_username": {
												"value": "@pipeline().parameters.pl_source_username",
												"type": "Expression"
											},
											"ls_password": {
												"value": "@pipeline().parameters.pl_source_password",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Log Activity Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[logActivityStart]",
							"storedProcedureParameters": {
								"pipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runDate": {
									"value": {
										"value": "@utcNow('yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"sinkScehma": {
									"value": {
										"value": "@pipeline().parameters.pl_sink_schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"sinkTable": {
									"value": {
										"value": "@pipeline().parameters.pl_sink_table",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourceSchema": {
									"value": {
										"value": "@pipeline().parameters.pl_source_schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourceTable": {
									"value": {
										"value": "@pipeline().parameters.pl_source_table",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAzureSqlParamed",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_domain_name": {
									"value": "@pipeline().parameters.pl_source_domain_name",
									"type": "Expression"
								},
								"ls_database": {
									"value": "@pipeline().parameters.pl_source_database",
									"type": "Expression"
								},
								"ls_username": {
									"value": "@pipeline().parameters.pl_source_username",
									"type": "Expression"
								},
								"ls_password": {
									"value": "@pipeline().parameters.pl_source_password",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Activity Completion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "batch iterator over the rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[logActivityCompletion]",
							"storedProcedureParameters": {
								"pipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsProcessed": {
									"value": {
										"value": "@variables('rowsProcessed')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAzureSqlParamed",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_domain_name": {
									"value": "@pipeline().parameters.pl_source_domain_name",
									"type": "Expression"
								},
								"ls_database": {
									"value": "@pipeline().parameters.pl_source_database",
									"type": "Expression"
								},
								"ls_username": {
									"value": "@pipeline().parameters.pl_source_username",
									"type": "Expression"
								},
								"ls_password": {
									"value": "@pipeline().parameters.pl_source_password",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Log Activity Failure lookup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "get_table_total_rows",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[logActivityFailure]",
							"storedProcedureParameters": {
								"failureMessage": {
									"value": {
										"value": "@activity('Log Activity Start').error?.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsAzureSqlParamed",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_domain_name": {
									"value": "@pipeline().parameters.pl_source_domain_name",
									"type": "Expression"
								},
								"ls_database": {
									"value": "@pipeline().parameters.pl_source_database",
									"type": "Expression"
								},
								"ls_username": {
									"value": "@pipeline().parameters.pl_source_username",
									"type": "Expression"
								},
								"ls_password": {
									"value": "@pipeline().parameters.pl_source_password",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_source_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_source_table": {
						"type": "string",
						"defaultValue": "chats"
					},
					"pl_source_schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"pl_batch_size": {
						"type": "string",
						"defaultValue": "4000"
					},
					"pl_sink_table": {
						"type": "string",
						"defaultValue": "chat_task_one"
					},
					"pl_sink_schema": {
						"type": "string",
						"defaultValue": "task_one"
					},
					"pl_log_table": {
						"type": "string",
						"defaultValue": "logs"
					},
					"pl_sink_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_sink_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_source_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					},
					"pl_sink_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_sink_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					}
				},
				"variables": {
					"rowsProcessed": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlGenericParamedSqlAuth')]",
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSqlParamed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Table to Table with mod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "\n1) Fetching limited rows\n\n2) Copy the rows in an another , By changing the one filed \n\n3) Table , Log how many rows you processed , pipeline name , pipeline run id , run date \n\nsource table , target table\n",
				"activities": [
					{
						"name": "get_table_total_rows",
						"description": "returns the total number of the table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as row_count FROM @{pipeline().parameters.pl_source_table}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGenericParamedSqlAuth",
								"type": "DatasetReference",
								"parameters": {
									"ds_domain_name": {
										"value": "@pipeline().parameters.pl_source_domain_name",
										"type": "Expression"
									},
									"ds_database": {
										"value": "@pipeline().parameters.pl_source_database",
										"type": "Expression"
									},
									"ds_username": {
										"value": "@pipeline().parameters.pl_source_username",
										"type": "Expression"
									},
									"ds_password": {
										"value": "@pipeline().parameters.pl_source_password",
										"type": "Expression"
									},
									"ds_schema": {
										"value": "@pipeline().parameters.pl_source_schema",
										"type": "Expression"
									},
									"ds_table": {
										"value": "@pipeline().parameters.pl_source_table",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "sink_completion_log",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "lsAzureSqlParamed",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_domain_name": {
									"value": "@pipeline().parameters.pl_sink_domain_name",
									"type": "Expression"
								},
								"ls_database": {
									"value": "@pipeline().parameters.pl_sink_database",
									"type": "Expression"
								},
								"ls_username": {
									"value": "@pipeline().parameters.pl_sink_username",
									"type": "Expression"
								},
								"ls_password": {
									"value": "@pipeline().parameters.pl_sink_password",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "IF EXISTS (SELECT 1 \nFROM INFORMATION_SCHEMA.TABLES \nWHERE TABLE_TYPE='BASE TABLE' \nAND TABLE_NAME='@{pipeline().parameters.pl_log_table}')\nBEGIN\nINSERT INTO [@{pipeline().parameters.pl_log_table}] VALUES ('@{pipeline().Pipeline}','@{pipeline().RunId}','@{utcNow('yyyy-MM-dd HH:mm:ss')}','@{pipeline().parameters.pl_source_table}','@{pipeline().parameters.pl_sink_table}')\nEND\nELSE\nBEGIN\ncreate table [@{pipeline().parameters.pl_log_table}] (\npipeline_name varchar(max),\npipeline_id varchar(max),\nrun_date datetime,\nsource_table varchar(max),\nsink_table varchar(max)\n)\nINSERT INTO [@{pipeline().parameters.pl_log_table}] VALUES ('@{pipeline().Pipeline}','@{pipeline().RunId}','@{utcNow('yyyy-MM-dd HH:mm:ss')}','@{pipeline().parameters.pl_source_table}','@{pipeline().parameters.pl_sink_table}')\nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_table_total_rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,add(div(activity('get_table_total_rows').output.firstRow.row_count, int(pipeline().parameters.pl_batch_size)),1))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat('[',pipeline().parameters.pl_source_schema,'].[get_modified_rows_',pipeline().parameters.pl_source_table,']')",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"batch_size": {
													"type": "Int32",
													"value": {
														"value": "@pipeline().parameters.pl_batch_size",
														"type": "Expression"
													}
												},
												"last_accessed_row": {
													"type": "Int32",
													"value": {
														"value": "@variables('last_accessed_row')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlGenericParamedSqlAuth",
											"type": "DatasetReference",
											"parameters": {
												"ds_domain_name": {
													"value": "@pipeline().parameters.pl_source_domain_name",
													"type": "Expression"
												},
												"ds_database": {
													"value": "@pipeline().parameters.pl_source_database",
													"type": "Expression"
												},
												"ds_username": {
													"value": "@pipeline().parameters.pl_source_username",
													"type": "Expression"
												},
												"ds_password": {
													"value": "@pipeline().parameters.pl_source_password",
													"type": "Expression"
												},
												"ds_schema": {
													"value": "@pipeline().parameters.pl_source_schema",
													"type": "Expression"
												},
												"ds_table": {
													"value": "@pipeline().parameters.pl_source_table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlGenericParamedSqlAuth",
											"type": "DatasetReference",
											"parameters": {
												"ds_domain_name": {
													"value": "@pipeline().parameters.pl_sink_domain_name",
													"type": "Expression"
												},
												"ds_database": {
													"value": "@pipeline().parameters.pl_sink_database",
													"type": "Expression"
												},
												"ds_username": {
													"value": "@pipeline().parameters.pl_sink_username",
													"type": "Expression"
												},
												"ds_password": {
													"value": "@pipeline().parameters.pl_sink_password",
													"type": "Expression"
												},
												"ds_schema": {
													"value": "@pipeline().parameters.pl_sink_schema",
													"type": "Expression"
												},
												"ds_table": {
													"value": "@pipeline().parameters.pl_sink_table",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "last_accessed_row",
										"value": {
											"value": "@string(mul(int(pipeline().parameters.pl_batch_size), item()))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "source_completion_log",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "lsAzureSqlParamed",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_domain_name": {
									"value": "@pipeline().parameters.pl_source_domain_name",
									"type": "Expression"
								},
								"ls_database": {
									"value": "@pipeline().parameters.pl_source_database",
									"type": "Expression"
								},
								"ls_username": {
									"value": "@pipeline().parameters.pl_source_username",
									"type": "Expression"
								},
								"ls_password": {
									"value": "@pipeline().parameters.pl_source_password",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "IF EXISTS (SELECT 1 \nFROM INFORMATION_SCHEMA.TABLES \nWHERE TABLE_TYPE='BASE TABLE' \nAND TABLE_NAME='@{pipeline().parameters.pl_log_table}')\nBEGIN\nINSERT INTO [@{pipeline().parameters.pl_log_table}] VALUES ('@{pipeline().Pipeline}','@{pipeline().RunId}','@{utcNow('yyyy-MM-dd HH:mm:ss')}','@{pipeline().parameters.pl_source_table}','@{pipeline().parameters.pl_sink_table}')\nEND\nELSE\nBEGIN\ncreate table [@{pipeline().parameters.pl_log_table}] (\npipeline_name varchar(max),\npipeline_id varchar(max),\nrun_date datetime,\nsource_table varchar(max),\nsink_table varchar(max)\n)\nINSERT INTO [@{pipeline().parameters.pl_log_table}] VALUES ('@{pipeline().Pipeline}','@{pipeline().RunId}','@{utcNow('yyyy-MM-dd HH:mm:ss')}','@{pipeline().parameters.pl_source_table}','@{pipeline().parameters.pl_sink_table}')\nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_source_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_source_table": {
						"type": "string",
						"defaultValue": "chats"
					},
					"pl_source_schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"pl_batch_size": {
						"type": "string",
						"defaultValue": "4000"
					},
					"pl_sink_table": {
						"type": "string",
						"defaultValue": "chat_task_one"
					},
					"pl_sink_schema": {
						"type": "string",
						"defaultValue": "task_one"
					},
					"pl_log_table": {
						"type": "string",
						"defaultValue": "logs"
					},
					"pl_sink_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_sink_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_source_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					},
					"pl_sink_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_sink_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					}
				},
				"variables": {
					"last_accessed_row": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlGenericParamedSqlAuth')]",
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSqlParamed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy-AzureSQL to AzureSynapsePool - QUERY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_kbq",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "sectionFive.FactSales"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT dt.[ProductID],dt.[SalesOrderID],dt.[OrderQty],dt.[UnitPrice],hd.[OrderDate],hd.[CustomerID],hd.[TaxAmt]\r\n  FROM [SalesLT].[SalesOrderDetail] dt\r\n  LEFT JOIN [SalesLT].[SalesOrderHeader] hd\r\n  ON dt.[SalesOrderID]=hd.[SalesOrderID]",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_kbq",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_kbq",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_kbq')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_kbq')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy-to-sectoinFive-logdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_oue",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "csv//Log.csv"
							},
							{
								"name": "Destination",
								"value": "sectionFive.logdata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlation id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Correlation id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Operation name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operation name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Event category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event initiated by",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Event initiated by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource group",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource group",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsGenericStorageCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsAzureSynapseMeeshPool",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsGenericStorageCSV')]",
				"[concat(variables('factoryId'), '/datasets/dsAzureSynapseMeeshPool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatalakeCSV-to-DatalakePARQUET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy CSV to PARQUET",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlation id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CorrelationID",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Operation name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OperationName",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Event category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventCategory",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Event initiated by",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventInitiatedBy",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resource type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResourceType",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resource group",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResourceGroup",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsGenericStorageCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy PARQUET to Azure Synapse Pool - BULK INSERT",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy CSV to PARQUET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CorrelationID",
											"type": "String"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OperationName",
											"type": "String"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EventCategory",
											"type": "String"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EventInitiatedBy",
											"type": "String"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResourceType",
											"type": "String"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResourceGroup",
											"type": "String"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsAzureSynapseMeeshPoolPARQUETlogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy PARQUET to Azure Synapse Pool - POLYBASE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy CSV to PARQUET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CorrelationID",
											"type": "String"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OperationName",
											"type": "String"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EventCategory",
											"type": "String"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EventInitiatedBy",
											"type": "String"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResourceType",
											"type": "String"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResourceGroup",
											"type": "String"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsAzureSynapseMeeshPoolPARQUETlogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsGenericStorageCSV')]",
				"[concat(variables('factoryId'), '/datasets/dsGenericStoragePARQUET')]",
				"[concat(variables('factoryId'), '/datasets/dsAzureSynapseMeeshPoolPARQUETlogs')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlow_DimensionTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_DimensionTables_From_CSV",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductCategoryStream": {},
									"ProductModelStream": {},
									"GETMAXCustomerSK": {},
									"DimProductLatest": {},
									"DimCustomerLatest": {},
									"DimCustomer": {},
									"DimProductSinkStream": {},
									"CustomerSKSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_DimensionTables_From_CSV')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlow_FactSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dtfFactSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_FactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetailStream": {},
									"SalesOrderHeaderStream": {},
									"SectionFiveFactSalesTableSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_FactSales')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive database to another db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get database table names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TABLE_NAME as tableName, TABLE_SCHEMA as tableSchema from INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGenericParamedSqlAuth",
								"type": "DatasetReference",
								"parameters": {
									"ds_domain_name": {
										"value": "@pipeline().parameters.pl_source_domain_name",
										"type": "Expression"
									},
									"ds_database": {
										"value": "@pipeline().parameters.pl_source_database",
										"type": "Expression"
									},
									"ds_username": {
										"value": "@pipeline().parameters.pl_source_username",
										"type": "Expression"
									},
									"ds_password": {
										"value": "@pipeline().parameters.pl_source_password",
										"type": "Expression"
									},
									"ds_schema": null,
									"ds_table": "none"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table iterator",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get database table names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get database table names').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Table Copy",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy Table to Table Generic",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pl_source_database": {
												"value": "@pipeline().parameters.pl_source_database",
												"type": "Expression"
											},
											"pl_source_table": {
												"value": "@item().tableName",
												"type": "Expression"
											},
											"pl_source_schema": {
												"value": "@item().tableSchema",
												"type": "Expression"
											},
											"pl_sink_table": {
												"value": "@item().tableName",
												"type": "Expression"
											},
											"pl_sink_schema": {
												"value": "@{pipeline().parameters.pl_source_database}.@{item().tableSchema}",
												"type": "Expression"
											},
											"pl_log_table": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"pl_sink_database": {
												"value": "@pipeline().parameters.pl_sink_database",
												"type": "Expression"
											},
											"pl_sink_domain_name": {
												"value": "@pipeline().parameters.pl_sink_domain_name",
												"type": "Expression"
											},
											"pl_source_domain_name": {
												"value": "@pipeline().parameters.pl_source_domain_name",
												"type": "Expression"
											},
											"pl_source_username": {
												"value": "@pipeline().parameters.pl_source_username",
												"type": "Expression"
											},
											"pl_source_password": {
												"value": "@pipeline().parameters.pl_source_password",
												"type": "Expression"
											},
											"pl_sink_username": {
												"value": "@pipeline().parameters.pl_sink_username",
												"type": "Expression"
											},
											"pl_sink_password": {
												"value": "@pipeline().parameters.pl_sink_password",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_source_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_source_database": {
						"type": "string",
						"defaultValue": "discord-chat"
					},
					"pl_source_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_source_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					},
					"pl_sink_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"pl_sink_database": {
						"type": "string",
						"defaultValue": "backup"
					},
					"pl_sink_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"pl_sink_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					}
				},
				"variables": {
					"rowsProcessed": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlGenericParamedSqlAuth')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Table to Table Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-ParquetLogs-to-JsonLogs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df-JSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_parquet_to_json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"blobparquetstream": {},
									"jsonSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy JSON logs to Pool DB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df-JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CorrelationID']"
										},
										"sink": {
											"name": "CorrelationID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['OperationName']"
										},
										"sink": {
											"name": "OperationName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['EventCategory']"
										},
										"sink": {
											"name": "EventCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['EventInitiatedBy']"
										},
										"sink": {
											"name": "EventInitiatedBy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ResourceType']"
										},
										"sink": {
											"name": "ResourceType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ResourceGroup']"
										},
										"sink": {
											"name": "ResourceGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "GenericStorageJsonLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_parquet_to_json')]",
				"[concat(variables('factoryId'), '/datasets/GenericStorageJsonLogs')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-blob-data-to Poll-DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_logdata_parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataParquetStream": {},
									"logdataPPrquet": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "GenericStorage_connection",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_logdata_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/learnMetaData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "use get metadata activity and d",
				"activities": [
					{
						"name": "GetFolderMetaData",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dsGetMetaFolder",
								"type": "DatasetReference",
								"parameters": {
									"dsContainer": {
										"value": "@pipeline().parameters.plContainer",
										"type": "Expression"
									},
									"dsFolder": {
										"value": "@pipeline().parameters.plFolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "setFolderItemsList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetFolderMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FolderItemsList",
							"value": {
								"value": "@activity('GetFolderMetaData').output.childItems",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FIleIterator",
						"description": "Iterates through a file list and segregate then according to the extension",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFolderMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFolderMetaData').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "CopyFileToExtensionFolder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"metadata": [
													{
														"name": "pipeline",
														"value": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														}
													}
												]
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "dsCopyFileToFolder",
											"type": "DatasetReference",
											"parameters": {
												"dsContainer": {
													"value": "@pipeline().parameters.plContainer",
													"type": "Expression"
												},
												"dsFolder": {
													"value": "@pipeline().parameters.plFolder",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dsCopyFileToFolder",
											"type": "DatasetReference",
											"parameters": {
												"dsContainer": {
													"value": "@pipeline().parameters.plContainer",
													"type": "Expression"
												},
												"dsFolder": {
													"value": "@item().name.split('.').last()",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"plContainer": {
						"type": "string",
						"defaultValue": "learning"
					},
					"plFolder": {
						"type": "string",
						"defaultValue": "DB_BACKUPS"
					}
				},
				"variables": {
					"FolderItemsList": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsGetMetaFolder')]",
				"[concat(variables('factoryId'), '/datasets/dsCopyFileToFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlCustomerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlGenericConnection')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsAzureSQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_table": {
						"type": "string"
					},
					"ds_schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlGenericParamedSqlAuth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsAzureSqlParamed",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_domain_name": {
							"value": "@dataset().ds_domain_name",
							"type": "Expression"
						},
						"ls_database": {
							"value": "@dataset().ds_database",
							"type": "Expression"
						},
						"ls_username": {
							"value": "@dataset().ds_username",
							"type": "Expression"
						},
						"ls_password": {
							"value": "@dataset().ds_password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ds_domain_name": {
						"type": "string"
					},
					"ds_database": {
						"type": "string"
					},
					"ds_username": {
						"type": "string"
					},
					"ds_password": {
						"type": "string"
					},
					"ds_schema": {
						"type": "string",
						"defaultValue": "none"
					},
					"ds_table": {
						"type": "string",
						"defaultValue": "none"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSqlParamed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsDimCustomer_MDF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "customerSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					},
					{
						"name": "SalesPerson",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "DimCustomer_MDF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsDimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductName",
						"type": "varchar"
					},
					{
						"name": "ProductModelName",
						"type": "varchar"
					},
					{
						"name": "ProductCategoryName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsFactSalesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "FactSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Correlationid",
						"type": "varchar"
					},
					{
						"name": "Operationname",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Eventcategory",
						"type": "varchar"
					},
					{
						"name": "Level",
						"type": "varchar"
					},
					{
						"name": "Time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Subscription",
						"type": "varchar"
					},
					{
						"name": "Eventinitiatedby",
						"type": "varchar"
					},
					{
						"name": "Resourcetype",
						"type": "varchar"
					},
					{
						"name": "Resourcegroup",
						"type": "varchar"
					},
					{
						"name": "Resource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "logdata_json"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericStorage_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customer02.csv",
						"folderPath": "Customers",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "PasswordHash",
						"type": "String"
					},
					{
						"name": "PasswordSalt",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoDataSalesOrderDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoDataSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoData_Product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoData_ProductCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ParentProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoData_ProductModel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "CatalogDescription",
						"type": "xml"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductModel"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_kbq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "FactSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericStorageJsonLogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericStorage_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Correlationid": {
							"type": "string"
						},
						"Operationname": {
							"type": "string"
						},
						"Status": {
							"type": "string"
						},
						"Eventcategory": {
							"type": "string"
						},
						"Level": {
							"type": "string"
						},
						"Time": {
							"type": "string"
						},
						"Subscription": {
							"type": "string"
						},
						"Eventinitiatedby": {
							"type": "string"
						},
						"Resourcetype": {
							"type": "string"
						},
						"Resourcegroup": {
							"type": "string"
						},
						"Resource": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_kbq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlMeesh_demoData_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlMeesh_demoData_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericStorage_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "yellow_tripdata_2009-01.parquet",
						"folderPath": "RAW",
						"fileSystem": "yellowtaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendor_name",
						"type": "UTF8"
					},
					{
						"name": "Trip_Pickup_DateTime",
						"type": "UTF8"
					},
					{
						"name": "Trip_Dropoff_DateTime",
						"type": "UTF8"
					},
					{
						"name": "Passenger_Count",
						"type": "INT64"
					},
					{
						"name": "Trip_Distance",
						"type": "DOUBLE"
					},
					{
						"name": "Start_Lon",
						"type": "DOUBLE"
					},
					{
						"name": "Start_Lat",
						"type": "DOUBLE"
					},
					{
						"name": "Rate_Code",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_forward",
						"type": "DOUBLE"
					},
					{
						"name": "End_Lon",
						"type": "DOUBLE"
					},
					{
						"name": "End_Lat",
						"type": "DOUBLE"
					},
					{
						"name": "Payment_Type",
						"type": "UTF8"
					},
					{
						"name": "Fare_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "Tip_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "Tolls_Amt",
						"type": "DOUBLE"
					},
					{
						"name": "Total_Amt",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsAzureSynapseMeeshPool')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Correlation id",
						"type": "varchar"
					},
					{
						"name": "Operation name",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Event category",
						"type": "varchar"
					},
					{
						"name": "Level",
						"type": "varchar"
					},
					{
						"name": "Time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Subscription",
						"type": "varchar"
					},
					{
						"name": "Event initiated by",
						"type": "varchar"
					},
					{
						"name": "Resource type",
						"type": "varchar"
					},
					{
						"name": "Resource group",
						"type": "varchar"
					},
					{
						"name": "Resource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "logdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsAzureSynapseMeeshPoolPARQUETlogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_dp203workspace1234_meeshpool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Correlationid",
						"type": "varchar"
					},
					{
						"name": "Operationname",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Eventcategory",
						"type": "varchar"
					},
					{
						"name": "Level",
						"type": "varchar"
					},
					{
						"name": "Time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Subscription",
						"type": "varchar"
					},
					{
						"name": "Eventinitiatedby",
						"type": "varchar"
					},
					{
						"name": "Resourcetype",
						"type": "varchar"
					},
					{
						"name": "Resourcegroup",
						"type": "varchar"
					},
					{
						"name": "Resource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sectionFive",
					"table": "logdata_parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_dp203workspace1234_meeshpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsCopyFileToFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsContainer": {
						"type": "string"
					},
					"dsFolder": {
						"type": "string"
					},
					"dsFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().dsFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dsFolder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().dsContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsGenericStorageCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericStorage_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Log.csv",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlation id",
						"type": "String"
					},
					{
						"name": "Operation name",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Event category",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Event initiated by",
						"type": "String"
					},
					{
						"name": "Resource type",
						"type": "String"
					},
					{
						"name": "Resource group",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsGenericStoragePARQUET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericStorage_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Log.parquet",
						"fileSystem": "parquet"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CorrelationID",
						"type": "UTF8"
					},
					{
						"name": "OperationName",
						"type": "UTF8"
					},
					{
						"name": "Status",
						"type": "UTF8"
					},
					{
						"name": "EventCategory",
						"type": "UTF8"
					},
					{
						"name": "Level",
						"type": "UTF8"
					},
					{
						"name": "Time",
						"type": "INT96"
					},
					{
						"name": "Subscription",
						"type": "UTF8"
					},
					{
						"name": "EventInitiatedBy",
						"type": "UTF8"
					},
					{
						"name": "ResourceType",
						"type": "UTF8"
					},
					{
						"name": "ResourceGroup",
						"type": "UTF8"
					},
					{
						"name": "Resource",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericStorage_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsGetMetaFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsContainer": {
						"type": "string"
					},
					"dsFolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().dsFolder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().dsContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMeesh_demoData_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlMeesh_demoData_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericStorage_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('GenericStorage_connection_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('GenericStorage_connection_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_dp203workspace1234_meeshpool')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('LS_dp203workspace1234_meeshpool_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lsAzureSQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsAzureSqlParamed')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ls_domain_name": {
						"type": "string",
						"defaultValue": "datametic-adf-learning.database.windows.net"
					},
					"ls_database": {
						"type": "string",
						"defaultValue": "backup"
					},
					"ls_username": {
						"type": "string",
						"defaultValue": "sipakhti"
					},
					"ls_password": {
						"type": "string",
						"defaultValue": "Bingo_12345"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lsAzureSqlParamed_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericConnection",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericConnection",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_source_schema as string,",
						"     df_source_table as string,",
						"     df_sink_schema as string,",
						"     df_sink_table as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     procedureName: '',",
						"     schemaName: ($df_source_schema),",
						"     resultSet: true,",
						"     format: 'procedure') ~> source1",
						"source1 derive(username = \"meh\") ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlGenericConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_DimensionTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerCSV",
								"type": "DatasetReference"
							},
							"name": "CustomerStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_Product",
								"type": "DatasetReference"
							},
							"name": "ProductStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_ProductModel",
								"type": "DatasetReference"
							},
							"name": "ProductModelStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimCustomer_MDF",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProductSinkStream"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinCategory"
						},
						{
							"name": "JoinProductModelStream"
						},
						{
							"name": "select1"
						},
						{
							"name": "ProductSK"
						},
						{
							"name": "select2"
						},
						{
							"name": "CustomerSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelStream",
						"ProductStream, ProductCategoryStream join(ProductStream@ProductCategoryID == ProductCategoryStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinCategory",
						"ProductJoinCategory, ProductModelStream join(ProductStream@ProductModelID == ProductModelStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductModelStream",
						"JoinProductModelStream select(mapColumn(",
						"          ProductID,",
						"          ProductModelID = ProductStream@ProductModelID,",
						"          ProductCategoryID = ProductStream@ProductCategoryID,",
						"          ProductName = ProductStream@Name,",
						"          ProductModelName = ProductModelStream@Name,",
						"          ProductCategoryName = ProductCategoryStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSK",
						"CustomerStream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> CustomerSK",
						"CustomerSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customerSK = CustomerSK,",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     )) ~> DimCustomer",
						"ProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductCategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> DimProductSinkStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerCSV')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_Product')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_ProductCategory')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_ProductModel')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsDimCustomer_MDF')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsDimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_DimensionTables_From_CSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerCSV",
								"type": "DatasetReference"
							},
							"name": "CustomerStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_Product",
								"type": "DatasetReference"
							},
							"name": "ProductStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "DemoData_ProductModel",
								"type": "DatasetReference"
							},
							"name": "ProductModelStream"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimCustomer_MDF",
								"type": "DatasetReference"
							},
							"name": "GETMAXCustomerSK"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProductLatest"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimCustomer_MDF",
								"type": "DatasetReference"
							},
							"name": "DimCustomerLatest"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimCustomer_MDF",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsDimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProductSinkStream"
						},
						{
							"name": "CustomerSKSink"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinCategory"
						},
						{
							"name": "JoinProductModelStream"
						},
						{
							"name": "SelectProductStream"
						},
						{
							"name": "ProductSK"
						},
						{
							"name": "SelectCustomerStream"
						},
						{
							"name": "CustomerSK"
						},
						{
							"name": "CustomerSKupdated"
						},
						{
							"name": "DoesCustomerExists"
						},
						{
							"name": "RowVerifier"
						},
						{
							"name": "DoesProductExists"
						},
						{
							"name": "ProductRowsVerifier"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelStream",
						"source(output(",
						"          customerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     procedureName: 'spGetMaxCustomerSK',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure',",
						"     staged: true) ~> GETMAXCustomerSK",
						"source(output(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductCategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimProductLatest",
						"source(output(",
						"          customerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimCustomerLatest",
						"ProductRowsVerifier@ProductLoadRows, ProductCategoryStream join(ProductRowsVerifier@ProductLoadRows@ProductCategoryID == ProductCategoryStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinCategory",
						"ProductJoinCategory, ProductModelStream join(ProductRowsVerifier@ProductLoadRows@ProductModelID == ProductModelStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductModelStream",
						"JoinProductModelStream select(mapColumn(",
						"          ProductID,",
						"          ProductModelID = ProductRowsVerifier@ProductLoadRows@ProductModelID,",
						"          ProductCategoryID = ProductRowsVerifier@ProductLoadRows@ProductCategoryID,",
						"          ProductName = ProductRowsVerifier@ProductLoadRows@Name,",
						"          ProductModelName = ProductModelStream@Name,",
						"          ProductCategoryName = ProductCategoryStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProductStream",
						"SelectProductStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSK",
						"RowVerifier@CustomerLoadRows select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomerStream",
						"SelectCustomerStream keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> CustomerSK",
						"CustomerSK derive(CustomerSK = CustomerSK + CustomerSKSink#outputs()[1].CustomerSKMAX) ~> CustomerSKupdated",
						"CustomerStream, DimCustomerLatest exists(CustomerStream@CustomerID == DimCustomerLatest@CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> DoesCustomerExists",
						"DoesCustomerExists split(!isNan(CustomerID),",
						"     disjoint: false) ~> RowVerifier@(CustomerLoadRows, CustomerSkip)",
						"ProductStream, DimProductLatest exists(ProductStream@ProductID == DimProductLatest@ProductID,",
						"     negate:true,",
						"     broadcast: 'auto')~> DoesProductExists",
						"DoesProductExists split(!isNan(ProductID),",
						"     disjoint: false) ~> ProductRowsVerifier@(ProductLoadRows, ProductSkip)",
						"CustomerSKupdated sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customerSK = CustomerSK,",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     )) ~> DimCustomer",
						"ProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductCategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> DimProductSinkStream",
						"GETMAXCustomerSK sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          CustomerSKMAX = customerSK",
						"     )) ~> CustomerSKSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerCSV')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_Product')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_ProductCategory')]",
				"[concat(variables('factoryId'), '/datasets/DemoData_ProductModel')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsDimCustomer_MDF')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsDimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_FactSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DemoDataSalesOrderDetail",
								"type": "DatasetReference"
							},
							"name": "SalesOrderDetailStream"
						},
						{
							"dataset": {
								"referenceName": "DemoDataSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeaderStream",
							"description": "Import data from SalesOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsFactSalesTable",
								"type": "DatasetReference"
							},
							"name": "SectionFiveFactSalesTableSink"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailJoinSalesOrderHeader",
							"description": "Left outer join on 'SalesOrderDetailStream' and 'SalesOrderHeaderStream'"
						},
						{
							"name": "select1"
						},
						{
							"name": "TotalAmount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderDetailStream",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderHeaderStream",
						"SalesOrderDetailStream, SalesOrderHeaderStream join(SalesOrderDetailStream@SalesOrderID == SalesOrderHeaderStream@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailJoinSalesOrderHeader",
						"SalesOrderDetailJoinSalesOrderHeader select(mapColumn(",
						"          SalesOrderID = SalesOrderDetailStream@SalesOrderID,",
						"          ProductID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(TotalAmount = multiply(OrderQty,UnitPrice)) ~> TotalAmount",
						"TotalAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          CustomerID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> SectionFiveFactSalesTableSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DemoDataSalesOrderDetail')]",
				"[concat(variables('factoryId'), '/datasets/DemoDataSalesOrderHeader')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsFactSalesTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_logdata_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "- filter NULL resourceGroup",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference"
							},
							"name": "logdataParquetStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsAzureSynapseMeeshPoolPARQUETlogs",
								"type": "DatasetReference"
							},
							"name": "logdataPPrquet"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CorrelationID as string,",
						"          OperationName as string,",
						"          Status as string,",
						"          EventCategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          EventInitiatedBy as string,",
						"          ResourceType as string,",
						"          ResourceGroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataParquetStream",
						"logdataParquetStream filter(isNull(ResourceGroup)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid = CorrelationID,",
						"          Operationname = OperationName,",
						"          Status,",
						"          Eventcategory = EventCategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby = EventInitiatedBy,",
						"          Resourcetype = ResourceType,",
						"          Resourcegroup = ResourceGroup,",
						"          Resource",
						"     )) ~> logdataPPrquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsGenericStoragePARQUET')]",
				"[concat(variables('factoryId'), '/datasets/dsAzureSynapseMeeshPoolPARQUETlogs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_parquet_to_json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsGenericStoragePARQUET",
								"type": "DatasetReference"
							},
							"name": "blobparquetstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericStorageJsonLogs",
								"type": "DatasetReference"
							},
							"name": "jsonSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CorrelationID as string,",
						"          OperationName as string,",
						"          Status as string,",
						"          EventCategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          EventInitiatedBy as string,",
						"          ResourceType as string,",
						"          ResourceGroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> blobparquetstream",
						"blobparquetstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     partitionFileNames:['log_json'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CorrelationID,",
						"          OperationName,",
						"          Status,",
						"          EventCategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          EventInitiatedBy,",
						"          ResourceType,",
						"          ResourceGroup,",
						"          Resource",
						"     ),",
						"     partitionBy('hash', 1)) ~> jsonSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsGenericStoragePARQUET')]",
				"[concat(variables('factoryId'), '/datasets/GenericStorageJsonLogs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfcdc1')]",
			"type": "Microsoft.DataFactory/factories/adfcdcs",
			"apiVersion": "2018-06-01",
			"properties": {
				"SourceConnectionsInfo": [
					{
						"SourceEntities": [
							{
								"name": "logs.backupLogs",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "logs"
										},
										{
											"name": "tableName",
											"value": "backupLogs"
										},
										{
											"name": "enableCdc",
											"value": true
										},
										{
											"name": "waterMarkColumn",
											"value": "runDate"
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "lsAzureSQL",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "skipInitialLoad",
									"value": true
								}
							]
						}
					}
				],
				"TargetConnectionsInfo": [
					{
						"TargetEntities": [
							{
								"name": "dbo.backupLogs",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "dbo"
										},
										{
											"name": "tableName",
											"value": "backupLogs"
										}
									]
								}
							},
							{
								"name": "discord-chat.logs.backupLogs",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "discord-chat"
										},
										{
											"name": "tableName",
											"value": "logs"
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "lsAzureSqlParamed",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "deletable",
									"value": false
								},
								{
									"name": "insertable",
									"value": true
								},
								{
									"name": "updateable",
									"value": false
								},
								{
									"name": "upsertable",
									"value": false
								},
								{
									"name": "skipDuplicateMapInputs",
									"value": true
								},
								{
									"name": "skipDuplicateMapOutputs",
									"value": true
								}
							]
						},
						"DataMapperMappings": [
							{
								"targetEntityName": "discord-chat.logs.backupLogs",
								"sourceEntityName": "logs.backupLogs",
								"sourceConnectionReference": {
									"connectionName": "lsAzureSQL",
									"type": "linkedservicetype"
								},
								"attributeMappingInfo": {
									"attributeMappings": []
								}
							}
						],
						"Relationships": []
					}
				],
				"Policy": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1
					},
					"mode": "Microbatch"
				},
				"allowVNetOverride": false
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSQL')]",
				"[concat(variables('factoryId'), '/linkedServices/lsAzureSqlParamed')]"
			]
		}
	]
}