{
	"name": "Copy Table to Table Generic",
	"properties": {
		"description": "\n1) Fetching limited rows\n\n2) Copy the rows in an another , By changing the one filed \n\n3) Table , Log how many rows you processed , pipeline name , pipeline run id , run date \n\nsource table , target table\n",
		"activities": [
			{
				"name": "get_table_total_rows",
				"description": "returns the total number of the table",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Log Activity Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[spGetTotalRowCount]",
						"storedProcedureParameters": {
							"tableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.pl_source_table",
									"type": "Expression"
								}
							},
							"tableSchema": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.pl_source_schema",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlGenericParamedSqlAuth",
						"type": "DatasetReference",
						"parameters": {
							"ds_domain_name": {
								"value": "@pipeline().parameters.pl_source_domain_name",
								"type": "Expression"
							},
							"ds_database": {
								"value": "@pipeline().parameters.pl_source_database",
								"type": "Expression"
							},
							"ds_username": {
								"value": "@pipeline().parameters.pl_source_username",
								"type": "Expression"
							},
							"ds_password": {
								"value": "@pipeline().parameters.pl_source_password",
								"type": "Expression"
							},
							"ds_schema": {
								"value": "@pipeline().parameters.pl_source_schema",
								"type": "Expression"
							},
							"ds_table": {
								"value": "@pipeline().parameters.pl_source_table",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "batch iterator over the rows",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get_table_total_rows",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@range(0,add(div(activity('get_table_total_rows').output.firstRow.totalRows, int(pipeline().parameters.pl_batch_size)),1))",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Row Copier",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[dbo].[spGetRows]",
									"storedProcedureParameters": {
										"batchSize": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.pl_batch_size",
												"type": "Expression"
											}
										},
										"offset": {
											"type": "String",
											"value": {
												"value": "@string(mul(item(), int(pipeline().parameters.pl_batch_size)))",
												"type": "Expression"
											}
										},
										"tableName": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.pl_source_table",
												"type": "Expression"
											}
										},
										"tableSchema": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.pl_source_schema",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "TUNCATE TABLE [@{pipeline().parameters.pl_sink_schema}].[@{pipeline().parameters.pl_sink_table}]",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqlGenericParamedSqlAuth",
									"type": "DatasetReference",
									"parameters": {
										"ds_domain_name": {
											"value": "@pipeline().parameters.pl_source_domain_name",
											"type": "Expression"
										},
										"ds_database": {
											"value": "@pipeline().parameters.pl_source_database",
											"type": "Expression"
										},
										"ds_username": {
											"value": "@pipeline().parameters.pl_source_username",
											"type": "Expression"
										},
										"ds_password": {
											"value": "@pipeline().parameters.pl_source_password",
											"type": "Expression"
										},
										"ds_schema": {
											"value": "@pipeline().parameters.pl_source_schema",
											"type": "Expression"
										},
										"ds_table": {
											"value": "@pipeline().parameters.pl_source_table",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "AzureSqlGenericParamedSqlAuth",
									"type": "DatasetReference",
									"parameters": {
										"ds_domain_name": {
											"value": "@pipeline().parameters.pl_sink_domain_name",
											"type": "Expression"
										},
										"ds_database": {
											"value": "@pipeline().parameters.pl_sink_database",
											"type": "Expression"
										},
										"ds_username": {
											"value": "@pipeline().parameters.pl_sink_username",
											"type": "Expression"
										},
										"ds_password": {
											"value": "@pipeline().parameters.pl_sink_password",
											"type": "Expression"
										},
										"ds_schema": {
											"value": "@pipeline().parameters.pl_sink_schema",
											"type": "Expression"
										},
										"ds_table": {
											"value": "@pipeline().parameters.pl_sink_table",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "If its the last batch",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Row Copier",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(div(activity('get_table_total_rows').output.firstRow.totalRows, int(pipeline().parameters.pl_batch_size)), item())\n\n",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "SetCopiedRows",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "rowsProcessed",
											"value": {
												"value": "@string(add(activity('Row Copier').output.rowsCopied, mul(int(pipeline().parameters.pl_batch_size), item())))",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Log Activity Failure Row Copier",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Row Copier",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[logActivityFailure]",
								"storedProcedureParameters": {
									"failureMessage": {
										"value": {
											"value": "@activity('Row Copier').error?.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipelineId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "lsAzureSqlParamed",
								"type": "LinkedServiceReference",
								"parameters": {
									"ls_domain_name": {
										"value": "@pipeline().parameters.pl_source_domain_name",
										"type": "Expression"
									},
									"ls_database": {
										"value": "@pipeline().parameters.pl_source_database",
										"type": "Expression"
									},
									"ls_username": {
										"value": "@pipeline().parameters.pl_source_username",
										"type": "Expression"
									},
									"ls_password": {
										"value": "@pipeline().parameters.pl_source_password",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Log Activity Start",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[logActivityStart]",
					"storedProcedureParameters": {
						"pipelineId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelineName": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"runDate": {
							"value": {
								"value": "@utcNow('yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"sinkScehma": {
							"value": {
								"value": "@pipeline().parameters.pl_sink_schema",
								"type": "Expression"
							},
							"type": "String"
						},
						"sinkTable": {
							"value": {
								"value": "@pipeline().parameters.pl_sink_table",
								"type": "Expression"
							},
							"type": "String"
						},
						"sourceSchema": {
							"value": {
								"value": "@pipeline().parameters.pl_source_schema",
								"type": "Expression"
							},
							"type": "String"
						},
						"sourceTable": {
							"value": {
								"value": "@pipeline().parameters.pl_source_table",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "lsAzureSqlParamed",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_domain_name": {
							"value": "@pipeline().parameters.pl_source_domain_name",
							"type": "Expression"
						},
						"ls_database": {
							"value": "@pipeline().parameters.pl_source_database",
							"type": "Expression"
						},
						"ls_username": {
							"value": "@pipeline().parameters.pl_source_username",
							"type": "Expression"
						},
						"ls_password": {
							"value": "@pipeline().parameters.pl_source_password",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Activity Completion",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "batch iterator over the rows",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[logActivityCompletion]",
					"storedProcedureParameters": {
						"pipelineId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"rowsProcessed": {
							"value": {
								"value": "@variables('rowsProcessed')",
								"type": "Expression"
							},
							"type": "Decimal"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "lsAzureSqlParamed",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_domain_name": {
							"value": "@pipeline().parameters.pl_source_domain_name",
							"type": "Expression"
						},
						"ls_database": {
							"value": "@pipeline().parameters.pl_source_database",
							"type": "Expression"
						},
						"ls_username": {
							"value": "@pipeline().parameters.pl_source_username",
							"type": "Expression"
						},
						"ls_password": {
							"value": "@pipeline().parameters.pl_source_password",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Activity Failure lookup",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "get_table_total_rows",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[logActivityFailure]",
					"storedProcedureParameters": {
						"failureMessage": {
							"value": {
								"value": "@activity('Log Activity Start').error?.message",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelineId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "lsAzureSqlParamed",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_domain_name": {
							"value": "@pipeline().parameters.pl_source_domain_name",
							"type": "Expression"
						},
						"ls_database": {
							"value": "@pipeline().parameters.pl_source_database",
							"type": "Expression"
						},
						"ls_username": {
							"value": "@pipeline().parameters.pl_source_username",
							"type": "Expression"
						},
						"ls_password": {
							"value": "@pipeline().parameters.pl_source_password",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"pl_source_database": {
				"type": "string",
				"defaultValue": "discord-chat"
			},
			"pl_source_table": {
				"type": "string",
				"defaultValue": "chats"
			},
			"pl_source_schema": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"pl_batch_size": {
				"type": "string",
				"defaultValue": "4000"
			},
			"pl_sink_table": {
				"type": "string",
				"defaultValue": "chat_task_one"
			},
			"pl_sink_schema": {
				"type": "string",
				"defaultValue": "task_one"
			},
			"pl_log_table": {
				"type": "string",
				"defaultValue": "logs"
			},
			"pl_sink_database": {
				"type": "string",
				"defaultValue": "discord-chat"
			},
			"pl_sink_domain_name": {
				"type": "string",
				"defaultValue": "datametic-adf-learning.database.windows.net"
			},
			"pl_source_domain_name": {
				"type": "string",
				"defaultValue": "datametic-adf-learning.database.windows.net"
			},
			"pl_source_username": {
				"type": "string",
				"defaultValue": "sipakhti"
			},
			"pl_source_password": {
				"type": "string",
				"defaultValue": "Bingo_12345"
			},
			"pl_sink_username": {
				"type": "string",
				"defaultValue": "sipakhti"
			},
			"pl_sink_password": {
				"type": "string",
				"defaultValue": "Bingo_12345"
			}
		},
		"variables": {
			"rowsProcessed": {
				"type": "String",
				"defaultValue": "0"
			}
		},
		"annotations": []
	}
}